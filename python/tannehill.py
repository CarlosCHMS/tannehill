
import numpy
import matplotlib.pyplot as plt

def func_a(Y, Z):

    if Y > -0.5:
        if Z <= 0.65:
            a = [1.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z <= 1.68:
            a = [1.455100, -0.000102, -0.081537, 0.000166, 0.000000, 0.000000, 0.000000, 0.000000, 0.128647, -0.049454, -0.101036, 0.033518, -15.000000, 0.000000, 0.000000, -1.420000, 0.000450, 0.203892, 0.101797]
        elif Z <= 2.46:
            a = [1.596080, -0.042426, -0.192840, 0.029353, 0.000000, 0.000000, 0.000000, 0.000000, -0.019430, 0.005954, 0.026097, -0.006164, -15.000000, 0.000000, 0.000000, -2.050000, -0.006609, 0.127637, 0.297037]
        else:
            a = [1.543630, -0.049071, -0.153562, 0.029209, 0.000000, 0.000000, 0.000000, 0.000000, -0.324907, -0.077599, 0.142408, 0.022071, -10.000000, 0.000000, 0.000000, -2.708000, -0.000081, 0.226601, 0.170922]
 
    elif Y > -4.5:
        if Z <= 0.65:
            a = [1.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z <= 1.54:
            a = [1.448130, 0.001292, -0.073510, -0.001948, 0.000000, 0.000000, 0.000000, 0.000000, 0.054745, -0.013705, -0.055473, 0.021874, -10.000000, 0.000000, 0.000000, -1.420000, -0.001973, 0.185233, -0.059952]
        elif Z <= 2.22:
            a = [1.731580, 0.003902, -0.272846, 0.006237, 0.000000, 0.000000, 0.000000, 0.000000, 0.041419, 0.037475, 0.016984, -0.018038, -10.000000, 3.000000, -0.025000, -2.025000, -0.013027, 0.074270, 0.012889]
        elif Z <= 2.90:
            a = [1.593500, 0.075324, -0.176186, -0.026072, 0.000000, 0.000000, 0.000000, 0.000000, -0.200838, -0.058536, 0.099687, 0.025287, -10.000000, 5.000000, 0.000000, -2.700000, 0.004342, 0.212192, -0.001293]
        else:
            a = [1.126880, -0.025957, 0.013602, 0.013772, 0.000000, 0.000000, 0.000000, 0.000000, -0.127737, -0.087942, 0.043104, 0.023547, -20.000000, 4.000000, 0.000000, -3.300000, 0.006348, 0.209716, -0.006001]
            
    else:
        if Z <= 0.65:
            a = [1.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z <= 1.50:
            a = [1.465430, 0.007625, -0.254500, -0.017244, 0.000292, 0.355907, 0.015422, -0.163235, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000954, 0.171187, 0.004567]
        elif Z <= 2.20:
            a = [2.026360, 0.058493, -0.454886, -0.027433, 0.000000, 0.000000, 0.000000, 0.000000, -0.165265, -0.014275, 0.136685, 0.010071, -30.000000, 0.000000, -0.009500, -1.947000, 0.008736, 0.184842, -0.302441]
        elif Z <= 3.05:
            a = [1.608040, 0.034791, -0.188906, -0.010927, 0.000000, 0.000000, 0.000000, 0.000000, -0.124117, -0.007277, 0.069839, 0.003985, -30.000000, 0.000000, -0.007000, -2.691000, 0.017884, 0.153672, -0.930224]
        elif Z <= 3.38:
            a = [1.256720, 0.007073, -0.039228, 0.000491, 0.000000, 0.000000, 0.000000, 0.000000, 0.721798, 0.073753, -0.198942, -0.021539, -50.000000, 0.000000, -0.008500, -3.334000, 0.002379, 0.217959, 0.005943]
        else:
            a = [-84.032700, -0.831761, 72.206600, 0.491914, 0.001153, -20.355900, -0.070617, 1.909790, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.006572, 0.183396, -0.135960]

    return a


def temperature(rho, e):

    aux = numpy.log(10)

    p = pressure(rho, e)

    Y = numpy.log(rho/1.225)/aux
    X = numpy.log(p/1.0134e5)/aux
    Z = X-Y

    if Y > -0.5:
        if Z<=0.48:
            b = [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z<=1.07:            
            b = [ 0.279268, 0.000000, 0.992172, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        else:            
            b = [ 0.233261, -0.056383, 1.197830, 0.063121, -0.165985, 0.000000, 0.000000, 0.000000, -0.814535, 0.099233, 0.602385, -0.067428, -0.098991, 5.000000, -20.000000, -1.780000] # corrigido -0.098991

    elif Y > -4.5:
        if Z <= 0.48:
            b = [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z <= 0.9165:
            b = [ 0.284312, 0.001644, 0.987912, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z <= 1.478:
            b = [ 0.502071, -0.012990, 0.774818, 0.025397, 0.000000, 0.000000, 0.000000, 0.000000, 0.009912, -0.150527, -0.000385, 0.105734, 0.000000, 0.000000, -15.000000, -1.280000]
        elif Z <= 2.176:
            b = [ 1.022940, 0.021535, 0.427213, 0.006900, 0.000000, 0.000000, 0.000000, 0.000000, -0.427823, -0.211991, 0.257096, 0.101192, 0.000000, 0.000000, -12.000000, -1.778000]
        else:
            b = [ 1.475400, 0.129620, 0.254154, -0.046411, 0.000000, 0.000000, 0.000000, 0.000000, -0.221229, -0.057077, 0.158116, 0.030430, 0.000000, 5.000000, 0.000000, -2.400000]
            
    else:
        if Z <= 0.3:    
            b = [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z <= 1.0:
            b = [ 0.271800, 0.000740, 0.990136, -0.004947, 0.000000, 0.000000, 0.000000, 0.000000, 0.990717, 0.175194, -0.982407, -0.159233, 0.000000, 0.000000, -20.000000, -0.880000]
        elif Z <= 1.35:            
            b = [ 1.399250, 0.167780, -0.143168, -0.159234, 0.000000, 0.000000, 0.000000, 0.000000, -0.027614, -0.090761, 0.307036, 0.121621, 0.000000, 0.000000, -20.000000, -1.170000]
        elif Z <= 1.79:            
            b = [ 1.114010, 0.002221, 0.351875, 0.017246, 0.000000, 0.000000, 0.000000, 0.000000, -1.150990, -0.173555, 0.673342, 0.088399, 0.000000, 0.000000, -20.000000, -1.560000]
        elif Z <= 2.47:            
            b = [ 1.017220, -0.017918, 0.473523, 0.025456, 0.000000, 0.000000, 0.000000, 0.000000, -2.179780, -0.334716, 0.898619, 0.127386, 0.000000, 0.000000, -20.000000, -2.220000]
        else:
            b = [ -45.087100, -9.005040, 35.868500, 6.792220, -6.776990, -0.064705, 0.025325, -1.273700, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]

    if b[0] == 0.0:
        T = p/(287.058*rho)
    else:    
        ans = b[0] + b[1]*Y + b[2]*Z
        ans += b[3]*Y*Z + b[4]*Z*Z + b[5]*Y*Y
        ans += b[6]*Y*Y*Z + b[7]*Y*Z*Z
        
        aux2 = b[8] + b[9]*Y + b[10]*Z + b[11]*Y*Z + b[12]*Z*Z
        aux2 /= 1 + numpy.exp((b[13]*Y + b[14])*(Z + b[15]))

        ans += aux2
    
        T = 151.78*numpy.exp(aux*ans)

    return T


def entalpy(rho, p):

    aux = numpy.log(10)  

    Y = numpy.log(rho/1.292)/aux
    X = numpy.log(p/1.013e5)/aux
    Z = X-Y

    if Y > -0.50:
        if Z <= 0.30:
            c = [ 1.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z <= 1.15:
            c = [ 1.425980, 0.000918, -0.092209, -0.002226, 0.019772, -0.036600, -0.077469, 0.043878, -15.000000, -1.000000, -1.040000]
        elif Z <= 1.60:
            c = [ 1.646890, -0.062155, -0.334994, 0.063612, -0.038332, -0.014468, 0.073421, -0.002442, -15.000000, -1.000000, -1.360000]
        else:
            c = [ 1.485580, -0.453562, -0.152096, 0.303350, -0.459282, 0.448395, 0.220546, -0.292293, -10.000000, -1.000000, -1.600000]
    elif Y > -4.50:
        if Z <= 0.30:                
            c = [ 1.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z <= 0.98:
            c = [ 1.421760, -0.000366, -0.083614, 0.000675, 0.005272, -0.115853, -0.007363, 0.146179, -20.000000, -1.000000, -0.860000]
        elif Z <= 1.38:
            c = [ 1.744360, -0.035354, -0.415045, 0.061921, 0.018536, 0.043582, 0.044353, -0.049750, -20.000000, -1.040000, -1.336000]
        elif Z <= 2.04:
            c = [ 1.496740, -0.021583, -0.197008, 0.030886, -0.157738, -0.009158, 0.123213, -0.006553, -10.000000, -1.050000, -1.895000]
        else:                
            c = [ 1.104210, -0.033664, 0.031768, 0.024335, -0.178802, -0.017456, 0.080373, 0.002511, -15.000000, -1.080000, -2.650000]
    else:
        if Z <= 0.398:
            c = [ 1.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        elif Z <= 0.87:
            c = [ 1.470030, 0.007939, -0.244205, -0.025607, 0.872248, 0.049452, -0.764158, 0.000147, -20.000000, -1.000000, -0.742000]
        elif Z <= 1.27:
            c = [ 3.186520, 0.137930, -1.895290, -0.103490, -2.145720, -0.272717, 2.065860, 0.223046, -15.000000, -1.000000, -1.041000]
        elif Z <= 1.863:
            c = [ 1.639630, -0.001004, -0.303549, 0.016464, -0.852169, -0.101237, 0.503123, 0.043580, -10.000000, -1.000000, -1.544000]
        else:
            c = [ 1.558890, 0.055932, -0.211764, -0.023548, -0.549041, -0.101758, 0.276732, 0.046031, -15.000000, -1.000000, -2.250000]
            
    g = c[0] + c[1]*Y + c[2]*Z + c[3]*Y*Z
    
    aux = c[4] + c[5]*Y + c[6]*Z + c[7]*Y*Z
    
    aux /= 1 + numpy.exp(c[8]*(X + c[9]*Y + c[10]))
    
    g += aux
    
    return (p/rho)*(g/(g-1))
    

def gamma_a1(a, Y, Z):

    gamma = a[0] + a[1]*Y + a[2]*Z
    gamma += a[3]*Y*Z + a[4]*Y*Y + a[5]*Z*Z
    gamma += a[6]*Y*Z*Z + a[7]*Z*Z*Z 

    aux = a[8] + a[9]*Y + a[10]*Z + a[11]*Y*Z
    aux /= 1 + numpy.exp((a[12] + a[13]*Y)*(Z + a[14]*Y + a[15]))

    gamma += aux

    return gamma 


def gamma_a(rho, e):

    aux = numpy.log(10)

    Y = numpy.log(rho/1.292)/aux
    Z = numpy.log(e/78408.4)/aux

    a = func_a(Y, Z)
        
    return gamma_a1(a, Y, Z)


def sound(rho, e):

    aux = numpy.log(10)

    Y = numpy.log(rho/1.292)/aux
    Z = numpy.log(e/78408.4)/aux

    a = func_a(Y, Z)

    g0 = gamma_a1(a, Y, Z)
    
    g1 = gamma_a1(a, Y + 0.01, Z)
    dgdy = (g1-g0)/(0.01)

    g1 = gamma_a1(a, Y, Z + 0.01)
    dgdz = (g1-g0)/(0.01)
    
    K1 = a[16]
    K2 = a[17]
    K3 = a[18]
    
    return numpy.sqrt(e*(K1 + (g0-1)*(g0 + K2*dgdz/aux) + K3*dgdy/aux))


def pressure(rho, e):

    g = gamma_a(rho, e)
    
    return rho*e*(g-1)
    
    
def test():

    x = numpy.arange(-7., 1., 0.5)    
    y = numpy.arange(0.5, 3, 0.25)
    
    X, Y = numpy.meshgrid(y, x)
    
    error = X*0.0

    rr = x*0
    for ii in range(0, len(rr)):    
        rr[ii] = 1.292*(10.**x[ii])
        
    ee = y*0
    for ii in range(0, len(ee)):    
        ee[ii] = 78408.4*(10.**y[ii])
 
    for ii in range(0, len(rr)):
        for jj in range(0, len(ee)):
            p = pressure(rr[ii], ee[jj])
            h = entalpy(rr[ii], p)
            error[ii][jj] = (h - p/rr[ii])/ee[jj] - 1
    
    plt.figure()
    plt.title('error')        
    plt.contourf(X, Y, error, levels=30)
    plt.colorbar()
    plt.show()


def pressureFit():

    er = numpy.arange(-7., 3., 1.)
    E = numpy.arange(-1., 3., 0.1)
    
    rr = 10.0**er
    ee = 10.0**E
                
    pL = []
    for r in rr:
        p = []
        for e in ee:
            p.append(pressure(1.292*r, 78408.4*e)/1.0134e5)
        pL.append(p)
        
    plt.figure()
    for p in pL:
        plt.loglog(p, ee, '.-')
        
    plt.show()


def temperatureFit():
    
    er = numpy.arange(-7., 3., 1.)
    E = numpy.arange(-1., 3.5, 0.1)
    
    rr = 10.0**er
    ee = 10.0**E
                
    pL = []
    TL = []
    for r in rr:
        p = []
        T = []
        for e in ee:
            p.append(pressure(1.292*r, 78408.4*e)/1.0134e5)
            T.append(temperature(1.292*r, 78408.4*e)/1.0134e5)
        pL.append(p)
        TL.append(T)
        
    plt.figure()
    for ii in range(0, len(pL)):
        plt.loglog(pL[ii], TL[ii], '.-')
        
    plt.show()    


def entalpyFit():
    
    er = numpy.arange(-7., 3., 1.)
    ep = numpy.arange(-8, 4., 0.1)
    
    rr = 10.0**er
    pp = 10.0**ep
                    
    pL = []
    hL = []
    for r in rr:
        p = []
        h = []
        for a in pp:
            p.append(a)
            h.append(entalpy(1.292*r, 1.0134e5*a)/78408.4)
        pL.append(p)
        hL.append(h)
        
    plt.figure()
    for ii in range(0, len(pL)):
        plt.loglog(pL[ii], hL[ii], '.-')
        
        
    plt.ylim([10.**-1, 10.**4])    
    plt.show()    


    
if __name__=='__main__':

    test()
    pressureFit()
    temperatureFit()
    entalpyFit()
    
